(defun filter-array (X lst)
  (defun filter-array-internal (X lst acc)
    (if (null lst)
        (reverse acc)
        (if (<= X (car lst))
            (filter-array-internal X (cdr lst) acc)
            (filter-array-internal X (cdr lst) (cons (car lst) acc)))))
  (filter-array-internal X lst '()))

(defun read-list ()
  (let ((n (read *standard-input* nil)))
    (if (null n)
        nil
        (cons n (read-list)))))

;; (format t "~{~d~%~}"(filter-array (read) (read-list)))

(defvar a 10)

(format t "~a~%"
        (reduce (lambda (a b)
                  (if (= (rem b 2) 0)
                      a
                      (+ a b)))
                '(1 2 3 4 5 6 7)))
